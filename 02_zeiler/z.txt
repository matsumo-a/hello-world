matsumo-a@gp12> cat /export/space/gomi-k/jupyter/notebook/06/02_zeiler/zeiler.ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "os.environ[\"http_proxy\"] = \"http://proxy.uec.ac.jp:8080/\"\n",
    "os.environ[\"https_proxy\"] = \"http://proxy.uec.ac.jp:8080/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "from torch.autograd import Variable\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import torchvision.models as models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "device = torch.device('cuda')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "if not '.JPEG' in torchvision.datasets.folder.IMG_EXTENSIONS:\n",
    "    torchvision.datasets.folder.IMG_EXTENSIONS.append('.JPEG')\n",
    "torchvision.datasets.folder.IMG_EXTENSIONS\n",
    "\n",
    "transform = transforms.Compose(\n",
    "    [transforms.Resize(256),\n",
    "     transforms.CenterCrop(224),\n",
    "     transforms.ToTensor(),\n",
    "     transforms.Normalize(mean=[0.485, 0.456, 0.406],\n",
    "                          std=[0.229, 0.224, 0.225])])\n",
    "\n",
    "valdir = os.path.join('ILSVRC/my')\n",
    "valset = torchvision.datasets.ImageFolder(valdir, transform=transform)\n",
    "val_loader = torch.utils.data.DataLoader(valset, batch_size=batch_size, shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "vgg16 = models.vgg16_bn(pretrained=True)\n",
    "vgg16 = vgg16.to(device)\n",
    "# net = nn.DataParallel(net)\n",
    "# print(vgg16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "labels = None\n",
    "with open('ILSVRC/labels.txt', 'r') as f:\n",
    "    labels = f.readlines()\n",
    "labels = [s.strip() for s in labels]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def predict(im):\n",
    "    vgg16.eval()\n",
    "    img = im.clone()\n",
    "    img.unsqueeze_(0)\n",
    "    with torch.no_grad():\n",
    "        out = vgg16(img.cuda())\n",
    "        out = F.softmax(out, dim=1)\n",
    "        out = out.cpu().data.numpy()\n",
    "        res = dict(zip(labels, out[0]))\n",
    "        return res, sorted(res.items(), key=lambda x: x[1], reverse=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "gray = torch.tensor(np.array([0.5, 0.5, 0.5]))\n",
    "\n",
    "def occlude(img, occ_size=64, stride=8):\n",
    "    for i in range(-56, 215, stride):\n",
    "        for j in range(-56, 215, stride):\n",
    "            img_ = img.clone()\n",
    "            img_[:, max(0,i):min(224-1,i+occ_size), max(0,j):min(224-1,j+occ_size)] = gray.view(3,1,1)\n",
    "            yield img_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "mean = np.array([0.485, 0.456, 0.406]).reshape((3,1,1))\n",
    "std = np.array([0.229, 0.224, 0.225]).reshape((3,1,1))\n",
    "\n",
    "def imshow(image):\n",
    "    img = torchvision.utils.make_grid(image).numpy()\n",
    "    img = img * std + mean\n",
    "    img = np.transpose(img, (1, 2, 0))\n",
    "    img = np.clip(img, 0, 1)\n",
    "    plt.imshow(img)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def zeiler(img):\n",
    "    res_d, res_l = predict(img)\n",
    "    ans_label, accuracy = res_l[0]\n",
    "\n",
    "    heatmap = np.zeros((34,34))\n",
    "    cnt = 0\n",
    "    occ = occlude(img)\n",
    "    for im in occ:\n",
    "        res_d, res_l = predict(im)\n",
    "        heatmap[cnt//34, cnt%34] = res_d[ans_label]\n",
    "        cnt += 1\n",
    "    \n",
    "    return heatmap, ans_label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n03942813 ping-pong ball\n"
     ]
    }
   ],
   "source": [
    "heatmap, ans_label = zeiler(valset[3][0])\n",
    "print(ans_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6a5df6beb8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "sns.heatmap(heatmap, cmap='jet', square=True, cbar=False)\n",
    "plt.savefig(\"heat_pingpong.png\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (Anaconda)",
   "language": "python",
   "name": "python3_anaconda"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
